openapi: 3.1.0
info:
  title: Kore HTTP
  description: >-
    This API provides interaction with Kore Ledger nodes using the HTTP
    protocol. It allows sending and retrieving various types of requests and
    managing subjects. The API is documented with OpenAPI for easy integration
    and use.
  contact:
    name: Kore Information
    url: 'https://www.kore-ledger.net/'
    email: info@kore-ledger.net
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  version: 0.3.0
paths:
  '/approval-request/{subject_id}':
    get:
      tags:
        - Approval
      summary: Get approvals
      description: >-
        Allows obtaining the list of requests for approvals received by the
        node.


        # Parameters


        * `Extension(bridge): Extension<Arc<bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<ApproveInfo>, Error>` - returns an Ok in a JSON or an
        error
      operationId: Get one Approval Request Data
      parameters:
        - name: subject_id
          in: path
          description: subject unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Approval Data successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproveInfo'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/approval-request/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json' \

            --data ''
    patch:
      tags:
        - Approval
      summary: patch approval
      description: >-
        Allows issuing an affirmative or negative approval for a previously
        received request.


        # Parameters


        * `Extension(bridge): Extension<Arc<bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` -The identifier of the subject as a
        path parameter.

        * `Json(response): Json<String>` - The response (approval or rejection)
        in JSON format


        # Returns


        * `Result<Json<String>, Error>` - The approval request in JSON format or
        an error if the request fails.
      operationId: Set your Aprroval for a request
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      requestBody:
        description: Vote of the user for an existing request
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Request successfully voted
          content:
            text/plain:
              schema:
                type: string
              example: >-
                The approval request for subject
                Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w has changed to
                RespondedAccepted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location --request PATCH
            'http://127.0.0.1:3000/approval-request/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json' \

            --data '"Accepted"'
  /auth:
    get:
      tags:
        - Auth
      summary: Get authorized subjects
      description: >-
        Allows obtaining the list of subjects that have been authorized by the
        node


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.


        # Returns


        * `Result<Json<Vec<String>>, Error>` - A list of authorized subjects in
        JSON format or an error if the request fails.
      operationId: Get authorized subjects
      responses:
        '200':
          description: 'A list of authorized subjects in JSON '
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - J6blziscpjD0pJXsRh6_ooPtBsvwEZhx-xO4hT7WoKg0
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: |-
            curl --location 'http://127.0.0.1:3000/auth' \
            --header 'Content-Type: application/json'
  '/auth/{subject_id}':
    get:
      tags:
        - Auth
      summary: Get witnesses subject
      description: >-
        Obtains a subject's witnesses


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<Vec<String>>, Error>` - a list of witness nodes in Json
        format or an error
      operationId: Get witnesses subject
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: a list of witness nodes in Json
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/auth/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
    put:
      tags:
        - Auth
      summary: Put authorization
      description: >-
        Given a subject identifier and one or more witnesses, the witnesses
        authorize the subject to send them copy of the logs


        # Parameters


        * `Extension(bridge): Extension<Arc<bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject to be
        authorized as a path parameter.

        * `Json(witnesses): Json<Vec<String>>` - The witnesses who will receive
        the copy of the logs in JSON format


        # Returns


        * `Result<Json<String>, Error>` - The result of the approval as a JSON
        object or an error if the request fails.
      operationId: Put Authorization
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      requestBody:
        description: witnesses
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: The result of the approval as a JSON object
          content:
            text/plain:
              schema:
                type: string
              example: Ok
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location --request PUT
            'http://127.0.0.1:3000/auth/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json' \

            --data '[]'
    delete:
      tags:
        - Auth
      summary: Delete authorized subjects
      description: >-
        Deletes an authorized subject given its identifier


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - bridge extension wrapped
        in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<String>, Error>` - Ok in JSON format or an error if the
        request fails.
      operationId: Delete authorized subjects
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok in JSON format
          content:
            text/plain:
              schema:
                type: string
              example: Ok
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location --request DELETE
            'http://127.0.0.1:3000/auth/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
  /controller-id:
    get:
      tags:
        - Other
      summary: Get controller-id
      description: >-
        Gets the controller id of the node


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.


        # Returns


        * `Json<String>` - Returns the controller-id of the node in a Json
      operationId: Get controller-id
      responses:
        '200':
          description: Gets the controller id of the node
          content:
            text/plain:
              schema:
                type: string
              example: E2ZY7GjU14U3m-iAqvhQM6kiG62uqLdBMBwv4J-4tzwI
      x-codeSamples:
        - lang: Bash
          label: curl
          source: 'curl --location ''http://127.0.0.1:3000/peer-id'''
  /event-request:
    post:
      tags:
        - Request
      summary: Send event request
      description: >-
        Allows sending an event request for a subject to the Kore node.

        These requests can be of any type of event (fact, creation, transfer, or
        end of life).

        In case of external invocation, the requests can be signed.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The Bridge extension
        wrapped in an `Arc`.

        * `Json(request): Json<BridgeSignedEventRequest>` - The signed event
        request in JSON format.


        # Returns


        * `Result<Json<RequestData>, Error>` - The response to the event request
        wrapped in a JSON object, or an error.
      operationId: Send Event Request
      requestBody:
        description: The signed event request
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Request Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestData'
              example:
                request_id: JemKGBkBjpV5Q34zL-KItY9g-RuY4_QJIn0PpIjy0e_E
                subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location 'http://127.0.0.1:3000/event-request' \

            --header 'Content-Type: application/json' \

            --data '{\n  "request": {\n    "Create": {\n      "governance_id":
            "",\n      "schema_id": "governance",\n      "namespace": ""\n   
            }\n  }\n}'
  '/event-request/{request-id}':
    get:
      tags:
        - Request
      summary: Get request state
      description: >-
        Allows obtaining an event request by its identifier.


        # Parameters


        * `Extension(bridge): Extension<Arc<bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(request_id): Path<String>` - The identifier of the event request
        as a path parameter.


        # Returns


        * `Result<Json<RequestInfo>, Error>` - returns an Ok in a JSON or an
        error
      operationId: Get Request State
      parameters:
        - name: request-id
          in: path
          description: Event Request's unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Request Data successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestInfo'
              example:
                error: null
                status: Finish
                version: 0
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/event-request/JnF_-Y264BI-6g-VJKhdIgPtldne5JjnDFalYliafoP4'
            \

            --header 'Content-Type: application/json' \

            --data ''
  '/event/{subject_id}':
    get:
      tags:
        - Event
      summary: Get events of a sn
      description: >-
        Allows obtaining specific events of a subject by its identifier and sn.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.

        * `Query(parameters): Query<EventSnQuery>` - The query parameters for
        the request.


        # Returns


        * `Result<Json<EventInfo>, Error>` - A list of events in JSON format or
        an error if the request fails.
      operationId: Get Subject Events with sn
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
        - name: parameters
          in: query
          description: The query parameters for the request
          required: true
          schema:
            $ref: '#/components/schemas/EventSnQuery'
      responses:
        '200':
          description: >-
            Allows obtaining specific events of a subject by its identifier and
            sn
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventInfo'
              example:
                events:
                  - error: null
                    event_req:
                      Create:
                        governance_id: ''
                        namespace: []
                        schema_id: governance
                    patch: '[]'
                    sn: 0
                    subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
                    succes: true
                paginator:
                  next: null
                  pages: 1
                  prev: null
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU?sn=3'
            \

            --header 'Content-Type: application/json'
  '/events-first-last/{subject_id}':
    get:
      tags:
        - Event
      summary: Get first or last events of a subject
      description: >-
        Given a subject id a specific number of events can be obtained,
        depending on the quantity, reverse and success parameters.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.

        * `Query(parameters): Query<EventFirstLastQuery>` - The query parameters
        for the request.


        # Returns


        * `Result<Json<EventInfo>, Error>` - A list of events in JSON format or
        an error if the request fails.
      operationId: Get specifics Subject Events
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
        - name: parameters
          in: query
          description: The query parameters for the request
          required: true
          schema:
            $ref: '#/components/schemas/EventFirstLastQuery'
      responses:
        '200':
          description: >-
            Allows obtaining specific events of a subject by its identifier and
            sn
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventInfo'
              example:
                events:
                  - error: null
                    event_req:
                      Create:
                        governance_id: ''
                        namespace: []
                        schema_id: governance
                    patch: '[]'
                    sn: 0
                    subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
                    succes: true
                paginator:
                  next: null
                  pages: 1
                  prev: null
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events-first-last/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events-first-last/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyUquantity=50&reverse=False'
            \

            --header 'Content-Type: application/json'
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events-first-last/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU?quantity=50&reverse=True&success=False'
            \

            --header 'Content-Type: application/json'
  '/events/{subject_id}':
    get:
      tags:
        - Event
      summary: Get events of a subject
      description: >-
        Allows obtaining specific events of a subject by its identifier.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.

        * `Query(parameters): Query<EventsQuery>` - The pagination parameters
        for the request.


        # Returns


        * `Result<Json<PaginatorEvents>, Error>` - A list of events in JSON
        format or an error if the request fails.
      operationId: Get Subject Events
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
        - name: parameters
          in: query
          description: The query parameters for the request
          required: true
          schema:
            $ref: '#/components/schemas/EventsQuery'
      responses:
        '200':
          description: Allows obtaining specific events of a subject by its identifier.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatorEvents'
              example:
                events:
                  - error: null
                    event_req:
                      Create:
                        governance_id: ''
                        namespace: []
                        schema_id: governance
                    patch: '[]'
                    sn: 0
                    subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
                    succes: true
                paginator:
                  next: null
                  pages: 1
                  prev: null
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/events/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU?quantity=50&page=2''
            \

            --header 'Content-Type: application/json'
  '/manual-distribution/{subject_id}':
    post:
      tags:
        - Update
      summary: Manual Update
      description: >-
        Throw to witnesses the last distribution of a subject


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - bridge extension wrapped
        in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<String>, Error>` - A message in JSON format or an error
        if the request fails.
      operationId: Manual Update Subject
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subject Data successfully retrieved
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location --request POST
            'http://127.0.0.1:3000/manual-update/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
  /peer-id:
    get:
      tags:
        - Other
      summary: Get peer-id
      description: >-
        Gets the peer id of the node


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.


        # Returns


        * `Json<String>` - Returns the peer id of the node in a Json
      operationId: Get peer-id
      responses:
        '200':
          description: Gets the peer id of the node
          content:
            text/plain:
              schema:
                type: string
              example: 12D3KooWQTjWCGZa2f6ZVkwwcbEb4ghtS49AcssJSrATFBNxDpR7
      x-codeSamples:
        - lang: Bash
          label: curl
          source: 'curl --location ''http://127.0.0.1:3000/peer-id'''
  /register-governances:
    get:
      tags:
        - Governance
      summary: Get all gov
      description: >-
        Gets all the governorships to which the node belongs


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - bridge extension wrapped
        in an `Arc`.

        * `Query(parameters): Query<GovQuery>` - The query parameters for the
        request.


        # Returns


        * `Result<Json<Vec<GovsData>>, Error>` - A JSON with governance
        information or an error if the request fails.
      operationId: Get All Governances
      parameters:
        - name: parameters
          in: query
          description: The query parameters for the request
          required: true
          schema:
            $ref: '#/components/schemas/GovQuery'
      responses:
        '200':
          description: Gets all the governorships to which the node belongs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GovsData'
              example:
                - active: true
                  governance_id: JUH9HGYpqMgN3D3Wb43BCPKdb38K1ocDauupuvCN0plM
                - active: true
                  governance_id: Jl9LVUi8uVBmV9gitxEiiVeSWxEceZoOYT-Kx-t9DTVE
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: |-
            curl --location 'http://127.0.0.1:3000/register-governances' \
            --header 'Content-Type: application/json'
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/register-governances?active=True'' \

            --header 'Content-Type: application/json'
  '/register-subjects/{governance_id}':
    get:
      tags:
        - Subject
      summary: Get all subjects
      description: >-
        Allows obtaining the list of subjects known by the node with pagination.

        It can also be used to obtain only the governances and all subjects
        belonging to a specific governance.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(governance_id): Path<String>` - The identifier of the governance
        as a path parameter.

        * `Query(parameters): Query<SubjectQuery>` - The query parameters for
        the request.


        # Returns


        * `Result<Json<Vec<RegisterData>>, Error>` - A list of subjects in JSON
        format or an error if the request fails.
      operationId: Get All Subjects Data
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
        - name: parameters
          in: query
          description: The query parameters for the request
          required: true
          schema:
            $ref: '#/components/schemas/SubjectQuery'
        - name: governance_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subjects Data successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegisterData'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3001/register-subjects/JjU0gRF_T5qLBZhcTGfyTS7y2SfODkVRmr57PJYF1Xks'
            \

            --header 'Content-Type: application/json'
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3001/register-subjects/JjU0gRF_T5qLBZhcTGfyTS7y2SfODkVRmr57PJYF1Xks?active=True&schema=Governance'
            \

            --header 'Content-Type: application/json'
  '/signatures/{subject_id}':
    get:
      tags:
        - Signature
      summary: Get signatures of a subject
      description: >-
        Allows obtaining signatures of the last event of subject.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - The bridge extension
        wrapped in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<SignaturesInfo>, Error>` - the signature in JSON format
        or an error if the request fails.
      operationId: Get Subject Signatures
      parameters:
        - name: subject-id
          in: path
          description: Subject's unique id
          required: true
          schema:
            type: string
        - name: subject_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the signature in JSON format
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignaturesInfo'
              example:
                signatures_appr: null
                signatures_eval: null
                signatures_vali:
                  - Signature:
                      content_hash: JLZZ0vv3xwydlcUSIyS2r1J3f8Gz9R03i6ofLTwltheE
                      signer: E2ZY7GjU14U3m-iAqvhQM6kiG62uqLdBMBwv4J-4tzwI
                      timestamp: 17346911
                      value: >-
                        SEySTR3fRiBzlps2Zc3r-Yb8HMiCV5kZJtAu7DYt4xczN8ogW5AZhVjhn6EOj3DmsNyBeFaGIHQrnVnPxA8vkBDA
                sn: 0
                subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/signatures/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
  '/state/{subject_id}':
    get:
      tags:
        - State
      summary: Get state of a subject
      description: >-
        Allows obtaining specific state of a subject by its identifier.


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - bridge extension wrapped
        in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<SubjectInfo>, Error>` -the state of the subject in JSON
        format or an error if the request fails.
      operationId: Get Subject State
      parameters:
        - name: subject-id
          in: path
          description: Subject's unique id
          required: true
          schema:
            type: string
        - name: subject_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Allows obtaining specific state of a subject by its identifier.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectInfo'
              example:
                active: true
                creator: E2ZY7GjU14U3m-iAqvhQM6kiG62uqLdBMBwv4J-4tzwI
                genesis_gov_version: 0
                governance_id: ''
                namespace: ''
                owner: E2ZY7GjU14U3m-iAqvhQM6kiG62uqLdBMBwv4J-4tzwI
                properties:
                  members:
                    - id: E2ZY7GjU14U3m-iAqvhQM6kiG62uqLdBMBwv4J-4tzwI
                      name: Owner
                  policies:
                    - approve:
                        quorum: MAJORITY
                      evaluate:
                        quorum: MAJORITY
                      id: governance
                      validate:
                        quorum: MAJORITY
                  roles:
                    - namespace: ''
                      role: WITNESS
                      schema:
                        ID: governance
                      who: MEMBERS
                    - namespace: ''
                      role: EVALUATOR
                      schema: ALL
                      who:
                        NAME: Owner
                    - namespace: ''
                      role: ISSUER
                      schema:
                        ID: governance
                      who:
                        NAME: Owner
                    - namespace: ''
                      role: APPROVER
                      schema:
                        ID: governance
                      who:
                        NAME: Owner
                    - namespace: ''
                      role: VALIDATOR
                      schema: ALL
                      who:
                        NAME: Owner
                    - namespace: ''
                      role: WITNESS
                      schema: ALL
                      who:
                        NAME: Owner
                  schemas: []
                  version: 0
                schema_id: governance
                sn: 0
                subject_id: Jd_vA5Dl1epomG7wyeHiqgKdOIBi28vNgHjRl6hy1N5w
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location
            'http://127.0.0.1:3000/state/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
  '/update/{subject_id}':
    post:
      tags:
        - Update
      summary: Update Subject
      description: >-
        Updates an authorized subject given its identifier


        # Parameters


        * `Extension(bridge): Extension<Arc<Bridge>>` - bridge extension wrapped
        in an `Arc`.

        * `Path(subject_id): Path<String>` - The identifier of the subject as a
        path parameter.


        # Returns


        * `Result<Json<String>, Error>` - A message in JSON format or an error
        if the request fails.
      operationId: Update Subject
      parameters:
        - name: subject_id
          in: path
          description: Approval's unique id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subject Data successfully retrieved
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Bash
          label: curl
          source: >-
            curl --location --request POST
            'http://127.0.0.1:3000/update/JjyqcA-44TjpwBjMTu9kLV21kYfdIAu638juh6ye1gyU'
            \

            --header 'Content-Type: application/json'
components:
  schemas:
    ApprovalReqInfo:
      type: object
      required:
        - event_request
        - sn
        - gov_version
        - patch
        - state_hash
        - hash_prev_event
        - subject_id
      properties:
        event_request:
          $ref: '#/components/schemas/SignedInfo_FactInfo'
          description: The signed event request.
        gov_version:
          type: integer
          format: int64
          description: The version of the governance contract.
          minimum: 0
        hash_prev_event:
          type: string
          description: The hash of the previous event.
        patch:
          description: The patch to apply to the state.
        sn:
          type: integer
          format: int64
          description: The sequence number of the event.
          minimum: 0
        state_hash:
          type: string
          description: The hash of the state after applying the patch.
        subject_id:
          type: string
          description: The hash of the previous event.
    ApproveInfo:
      type: object
      required:
        - state
        - request
      properties:
        request:
          $ref: '#/components/schemas/ApprovalReqInfo'
        state:
          type: string
    ConfirmRequestInfo:
      type: object
      required:
        - subject_id
      properties:
        subject_id:
          type: string
    CreateRequestInfo:
      type: object
      required:
        - governance_id
        - schema_id
        - namespace
      properties:
        governance_id:
          type: string
        namespace:
          $ref: '#/components/schemas/Namespace'
        schema_id:
          type: string
    EOLRequestInfo:
      type: object
      required:
        - subject_id
      properties:
        subject_id:
          type: string
    EventFirstLastQuery:
      type: object
      properties:
        quantity:
          type:
            - integer
            - 'null'
          format: int64
          minimum: 0
        reverse:
          type:
            - boolean
            - 'null'
        success:
          type:
            - boolean
            - 'null'
    EventInfo:
      type: object
      required:
        - subject_id
        - sn
        - event_req
        - succes
      properties:
        error:
          oneOf:
            - type: 'null'
            - $ref: '#/components/schemas/ProtocolsError'
        event_req:
          $ref: '#/components/schemas/EventRequestInfo'
        patch: {}
        sn:
          type: integer
          format: int64
          minimum: 0
        subject_id:
          type: string
        succes:
          type: boolean
    EventRequestInfo:
      oneOf:
        - type: object
          required:
            - Create
          properties:
            Create:
              $ref: '#/components/schemas/CreateRequestInfo'
        - type: object
          required:
            - Fact
          properties:
            Fact:
              $ref: '#/components/schemas/FactRequestInfo'
        - type: object
          required:
            - Transfer
          properties:
            Transfer:
              $ref: '#/components/schemas/TransferRequestInfo'
        - type: object
          required:
            - Confirm
          properties:
            Confirm:
              $ref: '#/components/schemas/ConfirmRequestInfo'
        - type: object
          required:
            - EOL
          properties:
            EOL:
              $ref: '#/components/schemas/EOLRequestInfo'
    EventSnQuery:
      type: object
      required:
        - sn
      properties:
        sn:
          type: integer
          format: int64
          minimum: 0
    EventsQuery:
      type: object
      properties:
        page:
          type:
            - integer
            - 'null'
          format: int64
          minimum: 0
        quantity:
          type:
            - integer
            - 'null'
          format: int64
          minimum: 0
    FactInfo:
      type: object
      required:
        - payload
        - subject_id
      properties:
        payload: {}
        subject_id:
          type: string
    FactRequestInfo:
      type: object
      required:
        - subject_id
        - payload
      properties:
        payload: {}
        subject_id:
          type: string
    GovQuery:
      type: object
      properties:
        active:
          type:
            - boolean
            - 'null'
    GovsData:
      type: object
      required:
        - governance_id
        - active
      properties:
        active:
          type: boolean
        governance_id:
          type: string
    Namespace:
      type: array
      items:
        type: string
    Paginator:
      type: object
      required:
        - pages
      properties:
        next:
          type:
            - integer
            - 'null'
          format: int64
          minimum: 0
        pages:
          type: integer
          format: int64
          minimum: 0
        prev:
          type:
            - integer
            - 'null'
          format: int64
          minimum: 0
    PaginatorEvents:
      type: object
      required:
        - paginator
        - events
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventInfo'
        paginator:
          $ref: '#/components/schemas/Paginator'
    ProtocolsError:
      type: object
      properties:
        evaluation:
          type:
            - string
            - 'null'
        validation:
          type:
            - string
            - 'null'
    ProtocolsSignaturesInfo:
      oneOf:
        - type: object
          required:
            - Signature
          properties:
            Signature:
              $ref: '#/components/schemas/SignatureInfo'
        - type: object
          required:
            - TimeOut
          properties:
            TimeOut:
              $ref: '#/components/schemas/TimeOutResponseInfo'
    RegisterData:
      type: object
      required:
        - subject_id
        - schema
        - active
      properties:
        active:
          type: boolean
        schema:
          type: string
        subject_id:
          type: string
    RequestData:
      type: object
      required:
        - request_id
        - subject_id
      properties:
        request_id:
          type: string
        subject_id:
          type: string
    RequestInfo:
      type: object
      required:
        - status
        - version
      properties:
        error:
          type:
            - string
            - 'null'
        status:
          type: string
        version:
          type: integer
          format: int64
          minimum: 0
    SignatureInfo:
      type: object
      required:
        - signer
        - timestamp
        - content_hash
        - value
      properties:
        content_hash:
          type: string
        signer:
          type: string
        timestamp:
          type: integer
          format: int64
          minimum: 0
        value:
          type: string
    SignaturesInfo:
      type: object
      required:
        - subject_id
        - sn
        - signatures_vali
      properties:
        signatures_appr:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ProtocolsSignaturesInfo'
          uniqueItems: true
        signatures_eval:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ProtocolsSignaturesInfo'
          uniqueItems: true
        signatures_vali:
          type: array
          items:
            $ref: '#/components/schemas/ProtocolsSignaturesInfo'
          uniqueItems: true
        sn:
          type: integer
          format: int64
          minimum: 0
        subject_id:
          type: string
    SignedInfo_FactInfo:
      type: object
      required:
        - content
        - signature
      properties:
        content:
          type: object
          required:
            - payload
            - subject_id
          properties:
            payload: {}
            subject_id:
              type: string
        signature:
          $ref: '#/components/schemas/SignatureInfo'
    SubjectInfo:
      type: object
      required:
        - subject_id
        - governance_id
        - genesis_gov_version
        - namespace
        - schema_id
        - owner
        - creator
        - active
        - sn
        - properties
      properties:
        active:
          type: boolean
        creator:
          type: string
        genesis_gov_version:
          type: integer
          format: int64
          minimum: 0
        governance_id:
          type: string
        namespace:
          type: string
        owner:
          type: string
        properties: {}
        schema_id:
          type: string
        sn:
          type: integer
          format: int64
          minimum: 0
        subject_id:
          type: string
    SubjectQuery:
      type: object
      properties:
        active:
          type:
            - boolean
            - 'null'
        schema:
          type:
            - string
            - 'null'
    TimeOutResponseInfo:
      type: object
      required:
        - who
        - re_trys
        - timestamp
      properties:
        re_trys:
          type: integer
          format: int32
          minimum: 0
        timestamp:
          type: string
        who:
          type: string
    TransferRequestInfo:
      type: object
      required:
        - subject_id
        - new_owner
      properties:
        new_owner:
          type: string
        subject_id:
          type: string
tags:
  - name: Auth
    description: Endpoints related to authorization.
  - name: Update
    description: Endpoints related to Update.
  - name: Governance
    description: Endpoints related to Governances.
  - name: State
    description: Endpoints related to States.
  - name: Event
    description: Endpoints related to Events.
  - name: Approval
    description: Endpoints related to request approvals.
  - name: Request
    description: Endpoints for managing event requests.
  - name: Subject
    description: Endpoints for managing subjects and their data.
  - name: Other
    description: Miscellaneous endpoints for node identification and configuration.
